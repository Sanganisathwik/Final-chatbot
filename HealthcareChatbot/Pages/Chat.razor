@page "/chat"
@using HealthcareChatbot.Services
@inject ApiService ApiService
@inject ISnackbar Snackbar
@inject IJSRuntime JSRuntime

<PageTitle>Chat - Healthcare Chatbot</PageTitle>

<MudContainer MaxWidth="MaxWidth.Medium" Class="mt-4">
    <MudPaper Class="pa-4" Elevation="3">
        <MudText Typo="Typo.h4" Class="mb-4">Chat with Healthcare Assistant</MudText>
        <MudText Class="mb-4">Ask me anything about health, symptoms, or medical advice.</MudText>

        <div class="chat-container" style="height: 400px; overflow-y: auto; margin-bottom: 1rem; padding: 1rem; border: 1px solid var(--mud-palette-lines-default); border-radius: 4px;" id="chat-box">
            @if (messages.Count == 0)
            {
                <MudText Align="Align.Center" Class="my-4">Start a conversation by typing a message below.</MudText>
            }
            else
            {
                @foreach (var message in messages)
                {
                    <div class="message @(message.IsUser ? "user-message" : "bot-message")">
                        <MudText>@message.Content</MudText>
                    </div>
                }
            }
            @if (isLoading)
            {
                <div class="message bot-message">
                    <MudProgressCircular Size="Size.Small" Indeterminate="true" />
                </div>
            }
        </div>

        <MudTextField @bind-Value="UserInput" 
                     Placeholder="Type your message here..." 
                     Adornment="Adornment.End"
                     AdornmentIcon="@Icons.Material.Filled.Send"
                     OnAdornmentClick="SendMessage"
                     Immediate="true"
                     Class="mt-2" />

        @if (suggestedQueries.Count > 0)
        {
            <MudText Class="mt-4">Suggested queries:</MudText>
            <div class="d-flex flex-wrap gap-2 mt-2">
                @foreach (var query in suggestedQueries)
                {
                    <MudChip Color="Color.Primary" 
                             Variant="Variant.Outlined" 
                             OnClick="@(() => SelectQuery(query))">
                        @query
                    </MudChip>
                }
            </div>
        }

        <div class="d-flex justify-space-between mt-4">
            <MudButton Variant="Variant.Outlined" 
                      Color="Color.Secondary" 
                      OnClick="NewChat">
                New Chat
            </MudButton>
        </div>
    </MudPaper>
</MudContainer>

@code {
    private string UserInput { get; set; } = string.Empty;
    private List<ChatMessage> messages = new();
    private List<string> suggestedQueries = new();
    private bool isLoading = false;

    protected override async Task OnInitializedAsync()
    {
        await FetchSampleQueries();
    }

    private async Task FetchSampleQueries()
    {
        try
        {
            suggestedQueries = await ApiService.GetSampleQueriesAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error getting sample queries: {ex.Message}");
            suggestedQueries = new List<string>
            {
                "What are the symptoms of the flu?",
                "How can I manage diabetes?",
                "What are some tips for better sleep?"
            };
        }
    }

    private async Task SendMessage()
    {
        if (string.IsNullOrWhiteSpace(UserInput))
            return;

        var userMessage = UserInput;
        messages.Add(new ChatMessage { Content = userMessage, IsUser = true });
        UserInput = string.Empty;
        StateHasChanged();
        await JSRuntime.InvokeVoidAsync("scrollToBottom", "chat-box");

        try
        {
            isLoading = true;
            StateHasChanged();

            var response = await ApiService.GenerateResponseAsync(userMessage);
            messages.Add(new ChatMessage { Content = response, IsUser = false });
        }
        catch (Exception ex)
        {
            Snackbar.Add("Error sending message: " + ex.Message, Severity.Error);
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
            await JSRuntime.InvokeVoidAsync("scrollToBottom", "chat-box");
        }
    }

    private void SelectQuery(string query)
    {
        UserInput = query;
        StateHasChanged();
    }

    private void NewChat()
    {
        messages.Clear();
        UserInput = string.Empty;
        StateHasChanged();
    }

    private class ChatMessage
    {
        public string Content { get; set; } = string.Empty;
        public bool IsUser { get; set; }
    }
}